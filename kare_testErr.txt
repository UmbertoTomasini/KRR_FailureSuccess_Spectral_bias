import torch
import torch.nn.functional as F
import numpy as np
import time
import sys
from scipy.special import gamma


def gram_lap_1d(X: torch.tensor, Y: torch.tensor, sigma=100):
    '''
    X, Y tensors of shape P, 1, d
    '''
    n_x = X.size(0)
    n_y = Y.size(0)

    kernel = torch.exp( -torch.cdist(X, Y, p=2) / sigma)
    
    return kernel.squeeze()

def speed_matrices(G,lab,dim,lambb):

    G_inv = torch.linalg.inv(G+(lambb)*torch.eye(dim).to(device))
    G_inv = G_inv.double()

    temp = G_inv@ lab
    temp2 = G_inv@ temp
    temp3 = lab @temp2
    
    temp4 = torch.trace(G_inv@G_inv)
    temp5 = (torch.trace(G_inv))**2
    if(temp3<0 or temp4<0 or temp5<0):
        return 0,0
    else:
        temp31= temp3/temp4
        temp32= dim*temp3/temp5
        return temp31, temp32

#HEAVISIDE THETA
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
N_TEST = 0
print(device)
d_perp=0
chi = 1
sigma_pdf = 1
max_int= sigma_pdf*3  #see cell above

num_decadi= 4
n_tr=torch.zeros(5*num_decadi+3)
for hh in range(0,num_decadi):
    n_tr[5*hh]= 1*(10**hh)
    n_tr[5*hh+1]= 2*(10**hh)
    n_tr[5*hh+2]= 3*(10**hh)
    n_tr[5*hh+3]= 4*(10**hh)
    n_tr[5*hh+4]= 5*(10**hh)
n_tr[5*num_decadi]=(6.5)*10**3
n_tr[5*num_decadi+1]=(8.5)*10**3
n_tr[5*num_decadi+2]=10**4

n_tr = n_tr.to(device)
count=0

num_rip = int(sys.argv[1])
lexp = float(sys.argv[2])
lambb = (10.**(-lexp))
print(lambb)

start_time=time.time()
test_error = torch.zeros(len(n_tr)).to(device)
test_error_2 = torch.zeros(len(n_tr)).to(device)
for jj in n_tr:

    if(count>4 and count < 23):
        dim =int(jj)
        print(dim)

        xxT_np = np.load("emp_noSym_xxT_chi_%d_dp_0_P_%d.npy" %(chi,dim))
        xxT = torch.from_numpy(xxT_np).to(device)
        elided_count =0
        for yy in range(num_rip):

            label =torch.zeros(dim)
            for hh in range(dim):
                if(xxT[yy,hh]>0): 
                    label[hh]=1
                else:
                    label[hh]=-1
            label =label.to(device)
            G_mat = gram_lap_1d(xxT[yy,:].reshape(int(jj), 1), xxT[yy,:].reshape(int(jj), 1)) 
            temp31, temp32 = speed_matrices(G_mat,label.double(),dim,lambb)

            test_error[count] += temp31
            test_error_2[count] += temp32
        test_error[count]=test_error[count]/(num_rip-elided_count)
        test_error_2[count]=test_error_2[count]/(num_rip-elided_count)
    if(count%1==0):
        print(jj)
        print(count)
        print("--- %s seconds ---" % (time.time() - start_time))
    count+=1

    #SAVING FILE
    np.savetxt("jacot_err_chi_%d_dp_%d_5k_lambda_%f.txt" %(chi,d_perp,lexp),test_error.cpu().numpy())
    np.savetxt("jacot_err_chi_%d_dp_%d_2_5k_lambda_%f.txt" %(chi,d_perp,lexp),test_error_2.cpu().numpy())
